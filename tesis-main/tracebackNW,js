function x() {
	let traceback = []
	let edge = edges.find(e => e.i === n - 1 && e.j === m - 1)
	if (edge) {
		let d = obtenerPuntaje((n - 1) - 1, (m - 1) - 1)
		let s = obtenerPuntaje((n - 1) - 1, (m - 1))
		let l = obtenerPuntaje((n - 1), (m - 1) - 1)
		let puntajes = [d, s, l]
		let maximoPuntaje = Math.max(...puntajes)
		var i, j
		if (d === maximoPuntaje) {
			traceback.push({ i: n - 1, j: m - 1, camino: "diagonal" })
		} else if (s === maximoPuntaje) {
			traceback.push({ i: n - 1, j: m - 1, camino: "superior" })
		} else if (l === maximoPuntaje) {
			traceback.push({ i: n - 1, j: m - 1, camino: "lateral" })
		}

		if (traceback[traceback.length - 1]['camino'] === "diagonal") {
			i = (n - 1) - 1
			j = (m - 1) - 1
		}
		if (traceback[traceback.length - 1]['camino'] === "superior") {
			i = (n - 1) - 1
			j = (m - 1)
		}
		if (traceback[traceback.length - 1]['camino'] === "lateral") {
			i = (n - 1)
			j = (m - 1) - 1
		}
	}
	while (!(i === 0 && j === 0)) {
		let edge = edges.find(e => e.i === i && e.j === j)
		if (edge) {
			let d = obtenerPuntaje((i) - 1, (j) - 1)
			let s = obtenerPuntaje((i) - 1, (j))
			let l = obtenerPuntaje((i), (j) - 1)
			let puntajes = [d, s, l]
			let maximoPuntaje = Math.max(...puntajes)
			if (d === maximoPuntaje) {
				traceback.push({ i: i, j: j, camino: "diagonal" })
			} else if (s === maximoPuntaje) {
				traceback.push({ i: i, j: j, camino: "superior" })
			} else if (l === maximoPuntaje) {
				traceback.push({ i: i, j: j, camino: "lateral" })
			}
		}
		if (traceback[traceback.length - 1]['camino'] === "diagonal") {
			i = i - 1
			j = j - 1
		}
		if (traceback[traceback.length - 1]['camino'] === "superior") {
			i = i - 1
			j = j
		}
		if (traceback[traceback.length - 1]['camino'] === "lateral") {
			i = i
			j = j - 1
		}
	}
	return traceback
}


-- ///////


document.getElementById("anterior").addEventListener("click", function (event) {
	event.preventDefault()
	if(paso == 1) {
		inicializar(algoritmo)
	}
	else if (paso == 1) {
		inicializar(algoritmo)
	}
	else if(paso == 2) {
		inicializar(algoritmo)
	}
	else if(paso > 2 && paso <= (n-1)*(m-1)+1) { 
		anterior(paso-2)
		paso --
	}
	else if(paso > 2 && paso > (n-1)*(m-1)+1 && paso <=limite) {
		let edge = edges.find(e => e.i === traceback[(traceback.length-(limite-paso))-1]['i'] && e.j === traceback[(traceback.length-(limite-paso))-1]['j'])
		if (edge) {
			edge.camino = 0
		}
		tracebackD32(obtenerPaso(traceback[(traceback.length-(limite-paso))-1]['i'], traceback[(traceback.length-(limite-paso))-1]['j'], m) + 1)
		paso --
	}
})


-- ///////////


if (paso < limite) {
    let x = traceback[traceback.length - (limite - paso)]['i']
    let y = traceback[traceback.length - (limite - paso)]['j']
    let edge = edges.find(e => e.i === x && e.j === y)
    if (edge) {
        edge.camino = 1
    }
    tracebackD3(obtenerPaso(x, y, m) + 1)
    paso++
}


traceback = x()
			limite = paso + traceback.length